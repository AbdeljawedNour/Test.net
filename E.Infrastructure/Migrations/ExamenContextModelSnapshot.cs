// <auto-generated />
using System;
using E.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E.Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    partial class ExamenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E.ApplicationCore.Domain.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<DateTime>("DateEmbauche")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyNom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Locataire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdhesion")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocataireType")
                        .HasColumnType("int");

                    b.Property<int>("PointsBonus")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Locataires");

                    b.HasDiscriminator<int>("LocataireType").HasValue(1);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Reservation", b =>
                {
                    b.Property<int>("VehiculeKey")
                        .HasColumnType("int");

                    b.Property<int>("LocataireFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DureeJours")
                        .HasColumnType("int");

                    b.HasKey("VehiculeKey", "LocataireFK", "DateReservation");

                    b.HasIndex("LocataireFK");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Vehicule", b =>
                {
                    b.Property<int>("VehiculeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehiculeId"));

                    b.Property<string>("Couleur")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Kilometrage")
                        .HasColumnType("int");

                    b.Property<double>("PrixJour")
                        .HasColumnType("float");

                    b.HasKey("VehiculeId");

                    b.ToTable("Vehicules");
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Entreprise", b =>
                {
                    b.HasBaseType("E.ApplicationCore.Domain.Locataire");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Personne", b =>
                {
                    b.HasBaseType("E.ApplicationCore.Domain.Locataire");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Locataire", b =>
                {
                    b.HasOne("E.ApplicationCore.Domain.Agent", "Agent")
                        .WithMany("Locataires")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Reservation", b =>
                {
                    b.HasOne("E.ApplicationCore.Domain.Locataire", "Locataire")
                        .WithMany("Reservations")
                        .HasForeignKey("LocataireFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E.ApplicationCore.Domain.Vehicule", "vehicule")
                        .WithMany("Reservations")
                        .HasForeignKey("VehiculeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locataire");

                    b.Navigation("vehicule");
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Agent", b =>
                {
                    b.Navigation("Locataires");
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Locataire", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("E.ApplicationCore.Domain.Vehicule", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
